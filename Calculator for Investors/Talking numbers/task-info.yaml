type: edu
files:
- name: main.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    import os
    import sqlite3

    from hstest import CheckResult, StageTest, dynamic_test, TestedProgram

    db_name = "investor.db"
    table_names = ["companies", "financial"]
    files_to_delete = ("investor.db",)
    db_created_message = "Database created successfully!"

    main_menu = """
    MAIN MENU
    0 Exit
    1 CRUD operations
    2 Show top ten companies by criteria
    """

    crud_menu = """
    CRUD MENU
    0 Back
    1 Create a company
    2 Read a company
    3 Update a company
    4 Delete a company
    5 List all companies
    """

    top_ten_menu = """
    TOP TEN MENU
    0 Back
    1 List by ND/EBITDA
    2 List by ROE
    3 List by ROA
    """

    go_company_msg = """0 Alphabet Inc (Google) Class C
    1 Wells Fargo & Company
    2 Goldman Sachs Group, Inc. (The)"""

    goldman_company_msg = """GS Goldman Sachs Group, Inc. (The)
    P/E = 4.87
    P/S = 1.64
    P/B = 0.07
    ND/EBITDA = None
    ROE = 0.19
    ROA = 0.01
    L/A = 0.93"""

    apple_company_msg = """0 Apple Inc
    1 Applied Materials, Inc."""

    american_company_msg = "0 American Express Company"

    welcome_msg = "Welcome to the Investor Program!"
    farewell_msg = "Have a nice day!"
    ask_option_msg = "Enter an option:"
    invalid_option_msg = "Invalid option!"
    not_implemented_msg = "Not implemented!"
    enter_company_name_msg = "Enter company name:"
    company_not_found_msg = "Company not found!"
    enter_company_number_msg = "Enter company number:"
    enter_ticker = "Enter ticker"
    enter_company = "Enter company"
    enter_industries = "Enter industries"
    enter_ebitda = "Enter ebitda"
    enter_sales = "Enter sales"
    enter_net_profit = "Enter net profit"
    enter_market_price = "Enter market price"
    enter_net_debt = "Enter net debt"
    enter_assets = "Enter assets"
    enter_equity = "Enter equity"
    enter_cash_equivalents = "Enter cash equivalents"
    enter_liabilities = "Enter liabilities"
    company_created_msg = "Company created successfully!"
    company_updated_msg = "Company updated successfully!"
    company_deleted_msg = "Company deleted successfully!"

    company_list = """COMPANY LIST
    AAPL Apple Inc Electronic Technology
    ABBV AbbVie Inc. Health Technology
    ABT Abbott Laboratories Health Technology
    ACN Accenture plc Technology Services
    ADBE Adobe Inc. Technology Services
    ADI Analog Devices, Inc. Electronic Technology
    ADP Automatic Data Processing, Inc. Technology Services
    AMAT Applied Materials, Inc. Producer Manufacturing
    AMD Advanced Micro Devices Inc Electronic Technology
    AMGN Amgen Inc. Health Technology
    AMZN Amazon.com, Inc. Retail Trade
    ANTM Anthem, Inc. Health Services
    AVGO Broadcom Inc. Electronic Technology
    BA Boeing Company (The) Electronic Technology
    BAC Bank of America Corporation Finance
    BKNG Booking Holdings Inc. Common Stock Consumer Services
    BLK BlackRock, Inc. Finance
    BMY Bristol-Myers Squibb Company Health Technology
    BX Blackstone Inc. Finance
    C Citigroup, Inc. Finance
    CAT Caterpillar, Inc. Producer Manufacturing
    CB Chubb Limited Finance
    CHTR Charter Communications, Inc. Consumer Services
    CI Cigna Corporation Health Services
    CMCSA Comcast Corporation Consumer Services
    COP ConocoPhillips Energy Minerals
    COST Costco Wholesale Corporation Retail Trade
    CRM Salesforce, Inc. Technology Services
    CSCO Cisco Systems, Inc. Technology Services
    CVS CVS Health Corporation Retail Trade
    CVX Chevron Corporation Energy Minerals
    DE Deere & Company Producer Manufacturing
    DHR Danaher Corporation Health Technology
    DIS Walt Disney Company (The) Consumer Services
    DUK Duke Energy Corporation (Holding Company) Utilities
    EL Estee Lauder Companies, Inc. (The) Consumer Non-Durables
    FB Meta Platforms, Inc. Technology Services
    GE General Electric Company Producer Manufacturing
    GILD Gilead Sciences, Inc. Health Technology
    GOOG Alphabet Inc (Google) Class C Technology Services
    GS Goldman Sachs Group, Inc. (The) Finance
    HD Home Depot, Inc. (The) Retail Trade
    HON Honeywell International Inc. Producer Manufacturing
    IBM International Business Machines Corporation Technology Services
    INTC Intel Corporation Electronic Technology
    INTU Intuit Inc. Technology Services
    ISRG Intuitive Surgical, Inc. Health Technology
    JNJ Johnson & Johnson Health Technology
    JPM JP Morgan Chase & Co. Finance
    KO Coca-Cola Company (The) Consumer Non-Durables
    LIN Linde plc Process Industries
    LLY Eli Lilly and Company Health Technology
    LMT Lockheed Martin Corporation Electronic Technology
    LOW Lowes Companies, Inc. Retail Trade
    MA Mastercard Incorporated Commercial Services
    MCD McDonalds Corporation Consumer Services
    MDLZ Mondelez International, Inc. Consumer Non-Durables
    MDT Medtronic plc. Health Technology
    MMC Marsh & McLennan Companies, Inc. Finance
    MMM 3M Company Producer Manufacturing
    MO Altria Group, Inc. Consumer Non-Durables
    MOON Moon Corp Technology
    MRK Merck & Company, Inc. Health Technology
    MS Morgan Stanley Finance
    MSFT Microsoft Corp. Technology Services
    MU Micron Technology, Inc. Electronic Technology
    NEE NextEra Energy, Inc. Utilities
    NFLX Netflix, Inc. Technology Services
    NKE Nike, Inc. Consumer Non-Durables
    NOW ServiceNow, Inc. Technology Services
    NVDA NVIDIA Corporation Electronic Technology
    ORCL Oracle Corporation Technology Services
    PEP PepsiCo, Inc. Consumer Non-Durables
    PFE Pfizer, Inc. Health Technology
    PG Procter & Gamble Company (The) Consumer Non-Durables
    PM Philip Morris International Inc Consumer Non-Durables
    PYPL PayPal Holdings, Inc. Commercial Services
    QCOM QUALCOMM Incorporated Electronic Technology
    RTX Raytheon Technologies Corporation Electronic Technology
    SBUX Starbucks Corporation Consumer Services
    SCHW Charles Schwab Corporation (The) Finance
    SO Southern Company (The) Utilities
    SPGI S&P Global Inc. Commercial Services
    SYK Stryker Corporation Health Technology
    T AT&T Inc. Communications
    TGT Target Corporation Retail Trade
    TMO Thermo Fisher Scientific Inc Health Technology
    TMUS T-Mobile US, Inc. Communications
    TXN Texas Instruments Incorporated Electronic Technology
    UNH UnitedHealth Group Incorporated Health Services
    UNP Union Pacific Corporation Transportation
    UPS United Parcel Service, Inc. Transportation
    V Visa Inc. Finance
    VZ Verizon Communications Inc. Communications
    WFC Wells Fargo & Company Finance
    WMT Walmart Inc. Retail Trade
    XOM Exxon Mobil Corporation Energy Minerals
    ZTS Zoetis Inc. Health Technology"""

    # testing CRUD 1 (create) and, CRUD 3 (update)
    test_data_1 = [
        {
            "test_values": [
                ("1", (crud_menu + ask_option_msg)),
                ("1", enter_ticker),
                ("MOON", enter_company),
                ("Moon Corp", enter_industries),
                ("Technology", enter_ebitda),
                ("1000", enter_sales),
                ("1000", enter_net_profit),
                ("250", enter_market_price),
                ("2000", enter_net_debt),
                ("100", enter_assets),
                ("2000", enter_equity),
                ("2500", enter_cash_equivalents),
                ("2500", enter_liabilities),
                ("125", (company_created_msg + main_menu + ask_option_msg)),
                ("0", farewell_msg),
            ]
        },
        {
            "test_values": [
                ("1", (crud_menu + ask_option_msg)),
                ("3", enter_company_name_msg),
                ("app", (apple_company_msg + enter_company_number_msg)),
                ("0", enter_ebitda),
                ("2000", enter_sales),
                ("2000", enter_net_profit),
                ("5000", enter_market_price),
                ("1000", enter_net_debt),
                ("500", enter_assets),
                ("2000", enter_equity),
                ("2500", enter_cash_equivalents),
                ("7500", enter_liabilities),
                ("500", (company_updated_msg + main_menu + ask_option_msg)),
                ("0", farewell_msg),
            ]
        }
    ]

    # testing CRUD 2 (read), CRUD 4 (delete), CRUD 5 (company list), TOP TEN
    test_data_2 = [
        {
            "test_values": [
                ("1", (crud_menu + ask_option_msg)),
                ("2", enter_company_name_msg),
                ("notacompany", (company_not_found_msg + main_menu + ask_option_msg)),
                ("1", (crud_menu + ask_option_msg)),
                ("2", enter_company_name_msg),
                ("go", (go_company_msg + enter_company_number_msg)),
                ("2", (goldman_company_msg + main_menu + ask_option_msg)),
                ("0", farewell_msg),
            ]
        },
        {
            "test_values": [
                ("1", (crud_menu + ask_option_msg)),
                ("4", enter_company_name_msg),
                ("American", (american_company_msg + enter_company_number_msg)),
                ("0", (company_deleted_msg + main_menu + ask_option_msg)),
                ("0", farewell_msg),
            ]
        },
        {
            "test_values": [
                ("1", (crud_menu + ask_option_msg)),
                ("5", (company_list + main_menu + ask_option_msg)),
                ("0", farewell_msg),
            ]
        },
        {
            "test_values": [
                ("2", (top_ten_menu + ask_option_msg)),
                ("2", (not_implemented_msg + main_menu + ask_option_msg)),
                ("0", farewell_msg),
            ]
        },
    ]

    # testing if MOON is created and, AAPL updated in the database
    test_data_3 = [
        {
            "companies": [
                ("MOON", "Moon Corp", "Technology"),
            ]
        },
        {
            "financial": [
                ("MOON", 1000.0, 1000.0, 250.0, 2000.0, 100.0, 2000.0, 2500.0, 2500.0, 125.0),
                ("AAPL", 2000.0, 2000.0, 5000.0, 1000.0, 500.0, 2000.0, 2500.0, 7500.0, 500.0)
            ]
        }
    ]


    def delete_files(arr):
        for file_name in arr:
            if os.path.exists(file_name):
                os.remove(file_name)


    class InvestorTest(StageTest):
        def after_all_tests(self):
            delete_files(files_to_delete)

        # testing program flow using "in" instead of "equal" while comparing expected and output
        @dynamic_test(data=test_data_1)
        def test1(self, dict_):
            t = TestedProgram()
            output = t.start().strip()
            text = welcome_msg.strip() + main_menu.strip() + ask_option_msg.strip()
            if output.replace("\n", "") != text.replace("\n", ""):
                # print(repr(output))
                # print(repr(text))
                return CheckResult.wrong(
                    f"Your program should output:\n{text}\ninstead of:\n{output}")
            for test_values in dict_.values():
                for item in test_values:
                    output = t.execute(item[0]).strip()
                    text = item[1]
                    if text.replace("\n", "") not in output.replace("\n", ""):
                        # print(repr(output))
                        # print(repr(text))
                        return CheckResult.wrong(
                            f"Your program should output:\n{text}\ninstead of:\n{output}")
            return CheckResult.correct()

        # testing program flow using "equal" instead of "in" while comparing expected and output
        @dynamic_test(data=test_data_2)
        def test2(self, dict_):
            t = TestedProgram()
            output = t.start().strip()
            text = welcome_msg.strip() + main_menu.strip() + ask_option_msg.strip()
            if output.replace("\n", "") != text.replace("\n", ""):
                # print(repr(output))
                # print(repr(text))
                return CheckResult.wrong(
                    f"Your program should output:\n{text}\ninstead of:\n{output}")
            for test_values in dict_.values():
                for item in test_values:
                    output = t.execute(item[0]).strip()
                    text = item[1]
                    if output.replace("\n", "") != text.replace("\n", ""):
                        # print(repr(output))
                        # print(repr(text))
                        return CheckResult.wrong(
                            f"Your program should output:\n{text}\ninstead of:\n{output}")
            return CheckResult.correct()

        # testing if database exists
        @dynamic_test()
        def test3(self):
            if not os.path.exists(db_name):
                return CheckResult.wrong(
                    f"'{db_name}' does not exist!")
            return CheckResult.correct()

        # testing if tables exist
        @dynamic_test()
        def test4(self):
            conn = sqlite3.connect(db_name)
            cur = conn.cursor()
            for table in table_names:
                query = f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}';"
                cur.execute(query)
                r = cur.fetchall()
                if not r or r[0][0] != table:
                    conn.close()
                    return CheckResult.wrong(f"Table {table} not found!")
            conn.close()
            return CheckResult.correct()

        # testing if database created and updated companies/financial
        @dynamic_test(data=test_data_3)
        def test5(self, dict_):
            conn = sqlite3.connect(db_name)
            cur = conn.cursor()
            for table_name, test_values in dict_.items():
                for item in test_values:
                    value = item[0]
                    query = f"SELECT * FROM {table_name} WHERE ticker = ?"
                    cur.execute(query, (value,))
                    rows = cur.fetchall()
                    # [print(r) for r in rows]
                    if not rows:
                        conn.close()
                        return CheckResult.wrong(f"No data found with {item[0]}!")
                    elif len(rows) != 1:
                        conn.close()
                        return CheckResult.wrong(f"Too many result for {item[0]}!")
                    elif not (item == rows[0]):
                        conn.close()
                        return CheckResult.wrong(f"{item} content is not equal to {rows[0]}")
            conn.close()
            return CheckResult.correct()


    if __name__ == '__main__':
        InvestorTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import InvestorTest

    if __name__ == '__main__':
        InvestorTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/264/stages/1337/implement#comment
status: Unchecked
record: -1
